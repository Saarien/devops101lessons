# user  nginx;
worker_processes  auto;

error_log  logs/error.log notice;
# pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {

    proxy_cache_path /etc/nginx/nginx_cache keys_zone=mire_cache:10m;

    upstream app_mire {
        server mire:3000;
    }


    # nginx-lua-prometheus
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/usr/local/openresty/nginx/conf/nginx-lua-prometheus/?.lua;;";

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")

        metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"})
    }
    log_by_lua_block {
    metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
    metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    }



    server {
        listen       8080;

        server_name  proxy;

        location /problems/slow-image {
            proxy_cache mire_cache;
            proxy_cache_valid 200 1d;
            proxy_cache_use_stale error timeout http_500;
            proxy_cache_lock on;
            proxy_cache_key $request_uri;

            proxy_pass http://mire:3000;
        }

        location / {
            proxy_pass http://mire:3000;
        }

        location /stub_status {
            stub_status;
            allow 127.0.0.1;  # Allow only localhost to access the status
            allow 172.18.0.0/16;  # Allow Docker network to access the status
            # deny all;
        }

        location /metrics {
            allow 127.0.0.1;  # Allow only localhost to access the status
            allow 172.18.0.0/16;  # Allow Docker network to access the status 
            # deny all;

            content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            }
        }
    }
}